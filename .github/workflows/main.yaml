name: DIP_CICD
on: 
  push: 
    branches: [ "main" ]
  
jobs:
  build_frontend:
    name: Build and Push Frontend Image
    runs-on: ubuntu-latest
    steps:  
        - name: Checkout
          uses: actions/checkout@v4
          
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: ${{secrets.AWS_REGION}}

        - name: Login to AWS ECR
          id: aws-ecr-login
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build and push Docker image to AWS ECR
          env:
            ECR_REGISTRY: ${{ steps.aws-ecr-login.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.FRONTEND_REPO}}
            IMAGE_TAG: latest
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  build_api:
    name: Build and Push API Image
    runs-on: ubuntu-latest
    steps:  
        - name: Checkout
          uses: actions/checkout@v4
          
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: ${{secrets.AWS_REGION}}

        - name: Login to AWS ECR
          id: aws-ecr-login
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build and push Docker image to AWS ECR
          env:
            ECR_REGISTRY: ${{ steps.aws-ecr-login.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.API_REPO}}
            IMAGE_TAG: latest
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG