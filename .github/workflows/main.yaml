name: DIP_CICD
on: 
  push: 
    branches: [ "main" ]
  
jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest  
    steps:  
        - name: Checkout
          uses: actions/checkout@v4
          
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: ${{secrets.AWS_REGION}}

        - name: Login to AWS ECR
          id: aws-ecr-login
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build and push Docker image to AWS ECR
          env:
            ECR_REGISTRY: ${{ steps.aws-ecr-login.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
            IMAGE_TAG: latest
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    steps:  
        - name: Checkout
          uses: actions/checkout@v4
          
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Login to AWS ECR
          id: aws-ecr-login
          uses: aws-actions/amazon-ecr-login@v2

        - name: Deploy to AWS EC2 instance
          id: aws-ec2-deploy
          run: |
            command_id=$(aws ssm send-command \
              --instance-ids ${{ vars.AWS_EC2_INSTANCE_ID_1 }} ${{ vars.AWS_EC2_INSTANCE_ID_2 }} \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands = [
                "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.aws-ecr-login.outputs.registry }}"
              ]' --query "Command.CommandId" --output text
            )
            echo "command_id=$command_id" >> $GITHUB_OUTPUT
              
        - name: Wait for deploy step to finish on first EC2 instance
          run: |
            aws ssm wait command-executed \
            --command-id ${{ steps.aws-ec2-deploy.outputs.command_id }} \
            --instance-id ${{ vars.AWS_EC2_INSTANCE_ID_1 }}

        - name: Wait for deploy step to finish on second EC2 instance
          run: |
            aws ssm wait command-executed \
            --command-id ${{ steps.aws-ec2-deploy.outputs.command_id }} \
            --instance-id ${{ vars.AWS_EC2_INSTANCE_ID_2 }}
          
        - name: Deploy output
          run: |

            echo "$(aws ssm list-commands --command-id ${{ steps.aws-ec2-deploy.outputs.command_id }})"